<?xml version="1.0" encoding="utf-8" ?>

<package>
<job id="wscmd">
<?job error="false" debug="false" ?>

<script language="javascript"><![CDATA[

var NAME    = 'Windows Scripting Command';
var VERSION = '1.0.0 Beta';

]]></script>

<runtime>
<description><![CDATA[Windows Scripting Command Version 1.0.0 Beta
Copyright (C) 2009-2015, 2019, 2020 Ildar Shaimordanov

Run an external script file in the same way as it can be done traditionally via "cscript" or "wscript" with additional benefits making its usage closer to NodeJS or Perl.

Run itself in the interactive mode. Type in the prompt any JS or VBS commands and execute them immediately.

Run one line program from CLI and apply it on inputstream and other files. One line programs allow to estimate some code on the fly, without creating a temporary file. Writing one line programs you focus on the most important parts of the program implementation. Some implementation stuff -- like objects initialization, I/O operations etc -- are hidden on your eyes, however executed yet implicitly.

For better convenience there are few predefined global variables:

Common:

FSO     - "FileSystemObject"
ERROR   - The variable keeping the last error
STDIN   - "WScript.StdIn"
STDOUT  - "WScript.StdOut"
STDERR  - "WScript.StdErr"
USE     - The instance of "Importer" class to import VBS easier
ARGV    - The reference to the CLI arguments

Used in the loop mode:

STREAM  - The reference to the stream of the current file
FILE    - The name of the current file
FILEFMT - The format to open files ("ascii", "unicode" or system "default")
LINE    - The current line
FLN     - The line number in the current file
LN      - The total line number

These special functions can be used on the loop mode only to cover the issue when we can't use "continue" and "break".

next    - The "continue" operator
last    - The "break" operator

The interactive mode provides its own help page with the list of supplied functions.

The options below that supply the program parts for execution could be prepended with the prefix identifying the engine ("js" or "vbs") supposed to be used for processing these options. See examples below.

]]></description>
<example><![CDATA[
Examples:

- Count the number of lines:
  wscmd /n /endfile:"echo(FLN, FILE)" /end:"echo(LN)"
  wscmd /n /endfile:vbs:"echo FLN, FILE" /end:vbs:"echo LN"
  wscmd /use:vbs /n /endfile:"echo FLN, FILE" /end:"echo LN"

- Numerate lines of each input file (VScript example shows how to bypass the trouble with quotes within quotes):
  wscmd /p /e:"LINE = LN + ':' + LINE"
  wscmd /let:delim=":" /p /e:vbs:"LINE = LN & delim & LINE"

- Print first 10 lines (similar to "head", the unix tool):
  wscmd /let:head=10 /p /e:"LN > head && quit()"
  wscmd /use:vbs /let:head=10 /p /e:"if LN > head then exit : end if"

- Run VBScript in the interactive mode:
  wscmd /use:vbs /i
]]></example>
<named
	name="help"
	helpstring="Print this help and exit (&#34;/h&#34; shortcut)"
	type="simple"
	required="false"
	/>
<named
	name="version"
	helpstring="Print version information and exit"
	type="simple"
	required="false"
	/>
<named
	name="dry-run"
	helpstring="Show in pseudocode what is going to be executed"
	type="simple"
	required="false"
	/>
<!--
<named
	name="compile"
	helpstring="Compile and store to another file without execution"
	type="simple"
	required="false"
	/>
-->
<named
	name="quiet"
	helpstring="Be quiet in the interactive mode (&#34;/q&#34; shortcut)"
	type="simple"
	required="false"
	/>
<named
	name="use"
	helpstring="Use the engine (&#34;js&#34; or &#34;vbs&#34;)"
	type="string"
	required="false"
	/>
<named
	name="m"
	helpstring="Load the module (the same as &#34;require(...)&#34; in NodeJS)"
	type="string"
	required="false"
	/>
<named
	name="let"
	helpstring="Assign the value: &#34;name=value&#34;"
	type="string"
	required="false"
	/>
<named
	name="set"
	helpstring="Create the object: &#34;name=CreateObject(object)&#34;"
	type="string"
	required="false"
	/>
<named
	name="get"
	helpstring="Get the object: &#34;name=GetObject(object)&#34;"
	type="string"
	required="false"
	/>
<named
	name="e"
	helpstring="One line program (multiple &#34;/e&#34;'s supported)"
	type="string"
	required="false"
	/>
<named
	name="n"
	helpstring="Apply a program in a loop &#34;while read LINE { ... }&#34;"
	type="simple"
	required="false"
	/>
<named
	name="p"
	helpstring="Apply a program in a loop &#34;while read LINE { ... print }&#34;"
	type="simple"
	required="false"
	/>
<named
	name="begin"
	helpstring="The code for executing before the loop"
	type="string"
	required="false"
	/>
<named
	name="end"
	helpstring="The code for executing after the loop"
	type="string"
	required="false"
	/>
<named
	name="beginfile"
	helpstring="The code for executing before each file"
	type="string"
	required="false"
	/>
<named
	name="endfile"
	helpstring="The code for executing after each file"
	type="string"
	required="false"
	/>
<unnamed
	name="scriptfile"
	helpstring="The script file"
	required="false"
	/>
<!--
<named
	name="@"
	helpstring="Read arguments from the specified file"
	type="string"
	required="false"
	/>
-->
<named
	name="f"
	helpstring="Open a file as &#34;ascii&#34;, &#34;unicode&#34; or using system &#34;default&#34;"
	type="string"
	required="false"
	/>
<unnamed
	name="files"
	helpstring="Files for processing"
	required="false"
	/>
</runtime>

<script language="javascript" src="./core/wscmd-Helpers.js"></script>

<script language="javascript" src="./core/console.js"></script>

<script language="javascript" src="./core/require.js"></script>
<script language="vbscript" src="./core/importer.vbs"></script>

<script language="javascript" src="./core/wscmd-Program.js"></script>
<script language="javascript" src="./core/wscmd-Runner.js"></script>
<script language="javascript" src="./core/wscmd-REPL.js"></script>
<script language="javascript" src="./core/wscmd-CommandLine.js"></script>

</job>
</package>
